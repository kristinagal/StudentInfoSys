using StudentInfoSys.Database.Entities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace StudentInfoSys.Database
{
    public static class CsvHelperService
    {
        public static List<Department> GetDepartmentsFromInitialData()
        {
            var csv = File.ReadAllLines("InitialData\\departments.csv");
            var departments = new List<Department>();
            foreach (var line in csv.Skip(1))
            {
                var values = line.Split(',');
                var department = new Department
                {
                    DepartmentCode = values[0],
                    DepartmentName = values[1]
                };
                departments.Add(department);
            }
            return departments;
        }

        public static List<Lecture> GetLecturesFromInitialData()
        {
            var csv = File.ReadAllLines("InitialData\\lectures.csv");
            var lectures = new List<Lecture>();
            foreach (var line in csv.Skip(1))
            {
                var values = line.Split(',');
                var lectureTimes = values[1].Split('-'); // Splitting string LectureTime to timeSpan LectureStartTime and LectureEndTime
                var lecture = new Lecture
                {
                    // LectureId autogenerated in the database
                    LectureName = values[0],
                    LectureStartTime = TimeSpan.Parse(lectureTimes[0]),
                    LectureEndTime = TimeSpan.Parse(lectureTimes[1]),
                    Departments = new List<Department>()
                };
                lectures.Add(lecture);
            }
            return lectures;
        }

        public static List<Student> GetStudentsFromInitialData()
        {
            var csv = File.ReadAllLines("InitialData\\students.csv");
            var students = new List<Student>();
            foreach (var line in csv.Skip(1))
            {
                var values = line.Split(',');
                var student = new Student
                {
                    FirstName = values[0],
                    LastName = values[1],
                    StudentNumber = int.Parse(values[2]),
                    Email = values[3],
                    DepartmentCode = values[4],
                    Lectures = new List<Lecture>()
                };
                students.Add(student);
            }
            return students;
        }

        public static void GetStudentLecturesFromInitialData (StudentContext context)
        {
            var csv = File.ReadAllLines("InitialData\\student_lectures.csv");
            var lecturesByName = context.Lectures.ToDictionary(l => l.LectureName);
            var studentsByNumber = context.Students.ToDictionary(s => s.StudentNumber);

            foreach (var line in csv.Skip(1))
            {
                var values = line.Split(',');
                int studentNumber = int.Parse(values[0]);
                string lectureName = values[1];

                if (lecturesByName.TryGetValue(lectureName, out var lecture) &&
                    studentsByNumber.TryGetValue(studentNumber, out var student))
                {
                    student.Lectures.Add(lecture);

                    if (lecture.Students == null)
                    {
                        lecture.Students = new List<Student>();
                    }
                    lecture.Students.Add(student);
                }
            }
        }

        public static void GetDepartmentLecturesFromInitialData(StudentContext context)
        {
            var csv = File.ReadAllLines("InitialData\\department_lectures.csv");
            var lecturesByName = context.Lectures.ToDictionary(l => l.LectureName);
            var departmentsByCode = context.Departments.ToDictionary(d => d.DepartmentCode);

            foreach (var line in csv.Skip(1))
            {
                var values = line.Split(',');
                string departmentCode = values[0];
                string lectureName = values[1];

                if (lecturesByName.TryGetValue(lectureName, out var lecture) &&
                    departmentsByCode.TryGetValue(departmentCode, out var department))
                {
                    department.Lectures.Add(lecture);

                    if (lecture.Departments == null)
                    {
                        lecture.Departments = new List<Department>();
                    }
                    lecture.Departments.Add(department);
                }
            }
        }
    }
}
