using Microsoft.EntityFrameworkCore;
using StudentInfoSys.Database.Entities;
using StudentInfoSys.Database;

public class StudentContext : DbContext
{
    public DbSet<Lecture> Lectures { get; set; }
    public DbSet<Department> Departments { get; set; }
    public DbSet<Student> Students { get; set; }


    public StudentContext() : base() { }
    public StudentContext(DbContextOptions<StudentContext> options) : base(options) { }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer("Server=(localdb)\\mssqllocaldb;Database=StudentInfoSys;Trusted_Connection=True;");
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // fluent API - all relationships, renaming where needed
        modelBuilder.Entity<Lecture>()
            .HasMany(l => l.Departments)
            .WithMany(d => d.Lectures)
            .UsingEntity<Dictionary<string, object>>(
                "DepartmentLecture",
                j => j.HasOne<Department>().WithMany().HasForeignKey("DepartmentCode"),
                j => j.HasOne<Lecture>().WithMany().HasForeignKey("LectureId"));

        modelBuilder.Entity<Lecture>()
            .HasMany(l => l.Students)
            .WithMany(s => s.Lectures)
            .UsingEntity<Dictionary<string, object>>(
                "StudentLecture",
                j => j.HasOne<Student>().WithMany().HasForeignKey("StudentNumber"),
                j => j.HasOne<Lecture>().WithMany().HasForeignKey("LectureId"));

        modelBuilder.Entity<Student>()
            .HasOne(s => s.Department)
            .WithMany(d => d.Students)
            .HasForeignKey(s => s.DepartmentCode);


        // initial data seed
        var departments = CsvHelperService.GetDepartmentsFromInitialData();
        modelBuilder.Entity<Department>().HasData(departments);

        var students = CsvHelperService.GetStudentsFromInitialData();
        modelBuilder.Entity<Student>().HasData(students);

        // Lectures will be added manually in the main application code due to autogenerated LectureId.

        // When you seed data with Entity Framework Core using the HasData() method, you must provide
        // all key values explicitly for entities with autogenerated keys (such as LectureId). However,
        // if you leave LectureId unspecified or set it to zero, the database won’t generate the value
        // automatically during seeding.

    }
}
